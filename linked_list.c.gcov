        -:    0:Source:linked_list.c
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdbool.h>
        -:    4:#include <string.h>
        -:    5:#include <ctype.h>
        -:    6:#include "linked_list.h"
        -:    7:
        -:    8:typedef struct link link_t;
        -:    9:
        -:   10:union elem
        -:   11:{
        -:   12:  int i;
        -:   13:  unsigned int u;
        -:   14:  bool b;
        -:   15:  float f;
        -:   16:  void *p;
        -:   17:  char c;
        -:   18:  char *s;
        -:   19:};
        -:   20:
        -:   21:struct link
        -:   22:{
        -:   23:    elem_t element;
        -:   24:    link_t *next;
        -:   25:};
        -:   26:
        -:   27:struct list
        -:   28:{
        -:   29:    link_t *first;
        -:   30:    link_t *last;
        -:   31:    ioopm_eq_function eq_func;
        -:   32:    size_t size;
        -:   33:};
        -:   34:
        -:   35:struct list_iterator
        -:   36:{
        -:   37:    link_t *current;
        -:   38:    ioopm_list_t *list;
        -:   39:};
        -:   40:
function ioopm_list_iterator called 0 returned 0% blocks executed 0%
    #####:   41:ioopm_list_iterator_t *ioopm_list_iterator(ioopm_list_t *list){
    $$$$$:   41-block  0
    #####:   42:    ioopm_list_iterator_t *iter = calloc(1,sizeof(ioopm_list_iterator_t));
        -:   43:
    #####:   44:    iter->current = list->first;
    #####:   45:    iter->list = list;
        -:   46:
    #####:   47:    return iter;
    $$$$$:   47-block  0
unconditional  0 never executed
        -:   48:}
        -:   49:
function create_link called 6 returned 100% blocks executed 100%
        6:   50:static link_t *create_link(elem_t elem, link_t *pointer){
        6:   50-block  0
        6:   51:    link_t *entry = calloc(1,sizeof(link_t));
        6:   52:    entry->element = elem;
        6:   53:    entry->next = pointer;
        6:   54:    return entry;
        6:   54-block  0
unconditional  0 taken 6
        -:   55:}
        -:   56:
function ioopm_linked_list_create called 4 returned 100% blocks executed 100%
        4:   57:ioopm_list_t *ioopm_linked_list_create(ioopm_eq_function eq_func){
        4:   57-block  0
        4:   58:    ioopm_list_t *list = calloc(1,sizeof(ioopm_list_t));
        4:   59:    link_t *dummy = create_link(int_elem(0),NULL);
        4:   59-block  0
call    0 returned 4
        4:   60:    list->first = dummy;
        4:   61:    list->last = dummy;
        4:   62:    list->size = 0;
        4:   63:    list->eq_func = eq_func;
        4:   64:    return list;
unconditional  0 taken 4
        -:   65:}
        -:   66:
function destroy_link called 6 returned 100% blocks executed 100%
        6:   67:static void destroy_link (link_t *link){
        6:   67-block  0
        6:   68:    free(link);
        6:   69:    link = NULL;
        6:   70:}
        -:   71:
function ioopm_linked_list_destroy called 4 returned 100% blocks executed 100%
        4:   72:void ioopm_linked_list_destroy(ioopm_list_t *list){
        4:   72-block  0
        -:   73:    //Just nu antar funktionen att det alltid finns en dummy
        4:   74:    link_t *current_link = list->first;
        -:   75:    link_t *next_link;
       10:   76:    while(current_link!=NULL){
        4:   76-block  0
unconditional  0 taken 4
       10:   76-block  1
branch  1 taken 6
branch  2 taken 4 (fallthrough)
        6:   77:        next_link = current_link->next;
        6:   78:        destroy_link(current_link);
        6:   78-block  0
call    0 returned 6
        6:   79:        current_link = next_link;
unconditional  0 taken 6
        -:   80:    }
        4:   81:    free(list);
        4:   82:    list = NULL;
        4:   83:}
        -:   84:
function ioopm_linked_list_append called 2 returned 100% blocks executed 100%
        2:   85:void ioopm_linked_list_append(ioopm_list_t *list, elem_t value){
        2:   85-block  0
        2:   86:    link_t *new_last = create_link(value,NULL);
        2:   86-block  0
call    0 returned 2
        2:   87:    list->last->next = new_last;
        2:   88:    list->last = new_last;
        2:   89:    list->size +=1;
        2:   90:}
        -:   91:
function ioopm_linked_list_prepend called 0 returned 0% blocks executed 0%
    #####:   92:void ioopm_linked_list_prepend(ioopm_list_t *list, elem_t value){
    $$$$$:   92-block  0
    #####:   93:    link_t *first_link = create_link(value,list->first->next); //first element is dummy
    $$$$$:   93-block  0
call    0 never executed
    #####:   94:    list->first->next = first_link;
    #####:   95:    if(first_link->next==NULL){ //om vi lägger till ett link först i en tom lista blir den också sist
branch  0 never executed
branch  1 never executed
    #####:   96:        list->last = first_link;
    $$$$$:   96-block  0
unconditional  0 never executed
        -:   97:    }
    #####:   98:    list->size +=1;
    #####:   99:}
        -:  100:
        -:  101:// find_prev_link antar ett korrekt index
function find_previous_link called 2 returned 100% blocks executed 80%
        2:  102:static link_t *find_previous_link(ioopm_list_t *list, int index){
        2:  102-block  0
        2:  103:    link_t *pre_link = list->first;
        2:  104:    for(int i = 0; i < index; i++){
        2:  104-block  0
unconditional  0 taken 2
    $$$$$:  104-block  1
unconditional  1 never executed
        2:  104-block  2
branch  2 taken 0
branch  3 taken 2 (fallthrough)
    #####:  105:        pre_link = pre_link->next;
        -:  106:    }
        2:  107:    return pre_link;
        2:  107-block  0
unconditional  0 taken 2
        -:  108:}
        -:  109:
        -:  110://funktionen antar ett correct index
function ioopm_linked_list_insert called 0 returned 0% blocks executed 0%
    #####:  111:void ioopm_linked_list_insert(ioopm_list_t *list, int index, elem_t value){
    $$$$$:  111-block  0
        -:  112:   
    #####:  113:    link_t *pre_link = find_previous_link(list,index);
    $$$$$:  113-block  0
call    0 never executed
    #####:  114:    list->size +=1;
    #####:  115:    if(pre_link->next == NULL){ //ifall vi ska lägga till en link sist i listan
branch  0 never executed
branch  1 never executed
    #####:  116:        ioopm_linked_list_append(list,value);
    $$$$$:  116-block  0
call    0 never executed
    #####:  117:        return;
unconditional  0 never executed
        -:  118:    }
    #####:  119:    link_t *new_link = create_link(value,pre_link->next);
    $$$$$:  119-block  0
call    0 never executed
    #####:  120:    pre_link->next = new_link;
unconditional  0 never executed
        -:  121:}
        -:  122:
function ioopm_linked_list_remove called 0 returned 0% blocks executed 0%
    #####:  123:elem_t ioopm_linked_list_remove(ioopm_list_t *list, int index){
    $$$$$:  123-block  0
    #####:  124:    link_t *pre_link = find_previous_link(list, index);
    $$$$$:  124-block  0
call    0 never executed
        -:  125:
        -:  126:    // hitta linken som ska tas bort
    #####:  127:    link_t *remove_link = pre_link->next;
        -:  128:
    #####:  129:    list->size -=1;
        -:  130:
        -:  131:    // kolla ifall remove link är last
    #####:  132:    if (remove_link->next==NULL){
branch  0 never executed
branch  1 never executed
    #####:  133:        list->last = pre_link;   
    #####:  134:        pre_link->next = NULL;
    #####:  135:        elem_t value = remove_link->element;
    #####:  136:        destroy_link(remove_link);
    $$$$$:  136-block  0
call    0 never executed
    #####:  137:        return value;
unconditional  0 never executed
        -:  138:    }
        -:  139:
        -:  140:    // ersätt länken innans next med den
    #####:  141:    pre_link->next = remove_link->next;
        -:  142:
    #####:  143:    elem_t value = remove_link->element;
        -:  144:
        -:  145:    // destroy the link
    #####:  146:    destroy_link(remove_link);
    $$$$$:  146-block  0
call    0 never executed
        -:  147:
        -:  148:    // returnera elementet för remove_link
    #####:  149:    return value;
unconditional  0 never executed
    $$$$$:  149-block  0
unconditional  1 never executed
        -:  150:}
        -:  151:
        -:  152:// Only accepts valid indexes
function ioopm_linked_list_get called 2 returned 100% blocks executed 100%
        2:  153:elem_t ioopm_linked_list_get(ioopm_list_t *list, int index){
        2:  153-block  0
        2:  154:    link_t *pre_link = find_previous_link(list, index);
        2:  154-block  0
call    0 returned 2
        -:  155:
        2:  156:    elem_t element = pre_link->next->element;
        -:  157:
        2:  158:    return element;
unconditional  0 taken 2
        -:  159:}
        -:  160:
function ioopm_linked_list_contains called 0 returned 0% blocks executed 0%
    #####:  161:bool ioopm_linked_list_contains(ioopm_list_t *list, elem_t element){
    $$$$$:  161-block  0
    #####:  162:  ioopm_eq_function cmp = list->eq_func;
    #####:  163:  for (link_t *cursor = list->first->next; cursor; cursor = cursor->next)
    $$$$$:  163-block  0
unconditional  0 never executed
    $$$$$:  163-block  1
unconditional  1 never executed
    $$$$$:  163-block  2
branch  2 never executed
branch  3 never executed
        -:  164:    {
    #####:  165:      if (cmp(cursor->element, element)) return true;
    $$$$$:  165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  165-block  1
unconditional  3 never executed
        -:  166:    }
        -:  167:
    #####:  168:  return false;
    $$$$$:  168-block  0
unconditional  0 never executed
        -:  169:}
        -:  170:
function ioopm_linked_list_size called 4 returned 100% blocks executed 100%
        4:  171:size_t ioopm_linked_list_size(ioopm_list_t *list){
        4:  171-block  0
        4:  172:    size_t c = 0;
        4:  173:    link_t *link = list->first;
        6:  174:    while (link->next != NULL)
        4:  174-block  0
unconditional  0 taken 4
        6:  174-block  1
branch  1 taken 2
branch  2 taken 4 (fallthrough)
        -:  175:    {
        2:  176:        ++c;
        2:  177:        link = link->next;
        2:  177-block  0
unconditional  0 taken 2
        -:  178:    }
        4:  179:    return c;
        4:  179-block  0
unconditional  0 taken 4
        -:  180:}
        -:  181:
function ioopm_linked_list_is_empty called 0 returned 0% blocks executed 0%
    #####:  182:bool ioopm_linked_list_is_empty(ioopm_list_t *list){
    $$$$$:  182-block  0
    #####:  183:    return 0 == ioopm_linked_list_size(list);
    $$$$$:  183-block  0
call    0 never executed
unconditional  1 never executed
        -:  184:}
        -:  185:
        -:  186:
function ioopm_linked_list_clear called 0 returned 0% blocks executed 0%
    #####:  187:void ioopm_linked_list_clear(ioopm_list_t *list){
    $$$$$:  187-block  0
        -:  188:    
    #####:  189:    link_t *current_link = list->first->next;
        -:  190:    link_t *next_link;
    #####:  191:    while(current_link != NULL){
    $$$$$:  191-block  0
unconditional  0 never executed
    $$$$$:  191-block  1
branch  1 never executed
branch  2 never executed
    #####:  192:        next_link = current_link->next;
    #####:  193:        destroy_link(current_link);
    $$$$$:  193-block  0
call    0 never executed
    #####:  194:        current_link = next_link;
unconditional  0 never executed
        -:  195:    }
    #####:  196:    list->first->next = NULL;
    #####:  197:    list->last = list->first;
    #####:  198:}
        -:  199:
function ioopm_linked_list_all called 0 returned 0% blocks executed 0%
    #####:  200:bool ioopm_linked_list_all(ioopm_list_t *list, ioopm_char_predicate prop, void *extra){
    $$$$$:  200-block  0
        -:  201:    
    #####:  202:    if (ioopm_linked_list_is_empty(list)) {
    $$$$$:  202-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  203:        return false;
    $$$$$:  203-block  0
unconditional  0 never executed
        -:  204:    }
    #####:  205:    link_t *current_link = list->first->next;
    $$$$$:  205-block  0
unconditional  0 never executed
        -:  206:    do
        -:  207:    {
    #####:  208:        if(!prop(current_link->element, extra)){
    $$$$$:  208-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  209:            return false;
    $$$$$:  209-block  0
unconditional  0 never executed
        -:  210:        }
    #####:  211:        current_link = current_link->next;
        -:  212:
    #####:  213:    } while (current_link != NULL);
    $$$$$:  213-block  0
branch  0 never executed
branch  1 never executed
    #####:  214:    return true;
    $$$$$:  214-block  0
unconditional  0 never executed
        -:  215:}
        -:  216:
function ioopm_linked_list_any called 0 returned 0% blocks executed 0%
    #####:  217:bool ioopm_linked_list_any(ioopm_list_t *list, ioopm_char_predicate prop, void *extra){
    $$$$$:  217-block  0
    #####:  218:    if (ioopm_linked_list_is_empty(list)) {
    $$$$$:  218-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  219:        return false;
    $$$$$:  219-block  0
unconditional  0 never executed
        -:  220:    }
        -:  221:
    #####:  222:    link_t *current_link = list->first->next;
    $$$$$:  222-block  0
unconditional  0 never executed
        -:  223:    do
        -:  224:    {
    #####:  225:        if(prop(current_link->element, extra)){
    $$$$$:  225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  226:            return true;
    $$$$$:  226-block  0
unconditional  0 never executed
        -:  227:        }
    #####:  228:        current_link = current_link->next;
        -:  229:
    #####:  230:    } while (current_link != NULL);
    $$$$$:  230-block  0
branch  0 never executed
branch  1 never executed
    #####:  231:    return false;
    $$$$$:  231-block  0
unconditional  0 never executed
        -:  232:}
        -:  233:
function ioopm_linked_apply_to_all called 0 returned 0% blocks executed 0%
    #####:  234:void ioopm_linked_apply_to_all(ioopm_list_t *list, apply_fun_t func, void *extra){
    $$$$$:  234-block  0
    #####:  235:    for (link_t *cursor = list->first->next; cursor; cursor = cursor->next)
    $$$$$:  235-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  235-block  1
branch  2 never executed
branch  3 never executed
        -:  236:    {
    #####:  237:        func(&cursor->element, extra);
    $$$$$:  237-block  0
call    0 never executed
        -:  238:    }
    #####:  239:}
